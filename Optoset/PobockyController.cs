using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace Optoset
{
    public class PobockyController
    {

        private List<Pobocka> _pobocky;
        private HashSet<string> _kluce;
        private const string fileName = "pobocky.xml";

        public PobockyController()
        {
            Pobocky = new List<Pobocka>();
            Kluce = new HashSet<string>();

            if (File.Exists(Directory.GetCurrentDirectory() + "\\data\\" + fileName))
            {
                Load();
            }
        }

        public List<Pobocka> Pobocky
        {
            get { return _pobocky; }
            set { _pobocky = value; }
        }

        public HashSet<string> Kluce
        {
            get { return _kluce; }
            set { _kluce = value; }
        }

        public bool PridajPobocku(string cislo, string nazov)
        {
            Pobocka p = new Pobocka(cislo, nazov);
            if (p.Validate())
            {
                if (Kluce.Contains(cislo))
                {
                    MessageBox.Show("Pobočka s daným číslom už existuje");
                    return false;
                }
                Pobocky.Add(p);
                Kluce.Add(cislo);
                Pobocky = Pobocky.OrderBy(x => x.Cislo).ToList();
                return true;
            }
            return false;
        }

        public bool UpravitPobocku(int index, string cislo, string nazov)
        {
            Pobocka p = Pobocky[index];
            string oldCislo = p.Cislo;
            string oldNazov = p.Nazov;
            p.Cislo = cislo;
            p.Nazov = nazov;
            if (p.Validate())
            {
                if (Kluce.Contains(cislo) && !oldCislo.Equals(cislo))
                {
                    MessageBox.Show("Pobočka s daným číslom už existuje");
                    p.Cislo = oldCislo;
                    p.Nazov = oldNazov;
                    return false;
                }
                Kluce.Remove(oldCislo);
                Kluce.Add(cislo);
                Pobocky = Pobocky.OrderBy(x => x.Cislo).ToList();
                return true;
            }
            p.Cislo = oldCislo;
            p.Nazov = oldNazov;
            return false;
        }

        public bool ZmazatPobocku(int index)
        {
            DialogResult dr = MessageBox.Show("Naozaj chcete zmazať danú pobočku?", "Zmazanie pobočky", MessageBoxButtons.YesNo);
            if (dr == DialogResult.Yes)
            {
                Pobocka p = Pobocky[index];
                Kluce.Remove(p.Cislo);
                Pobocky.Remove(p);
                
                return true;
            }
            return false;
        }

        public void Save()
        {
            if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\data"))
            {
                Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\data");
            }

            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(Directory.GetCurrentDirectory() + "\\data\\" + fileName, settings);
            
            writer.WriteStartDocument();

            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("pobocky");

            foreach (var p in Pobocky)
            {
                writer.WriteStartElement("pobocka");
                writer.WriteElementString("cislo", p.Cislo);
                writer.WriteElementString("nazov", p.Nazov);
                writer.WriteEndElement();
            }

            writer.WriteEndElement();

            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }

        public void Load()
        {
            Pobocky = new List<Pobocka>();
            var file = new XmlDocument();
            file.Load(Directory.GetCurrentDirectory() + "\\data\\" + fileName);

            var pb = file.GetElementsByTagName("pobocky");
            if (pb.Count > 0)
            {
                XmlNodeList pobocky = pb[0].SelectNodes("pobocka");
                foreach (XmlNode p in pobocky)
                {
                    var cislo = p.SelectNodes("cislo")[0].InnerText;
                    var nazov = p.SelectNodes("nazov")[0].InnerText;
                    Pobocky.Add(new Pobocka(cislo, nazov));
                }
            }
        }
    }
}
