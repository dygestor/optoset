using System;
using System.IO;
using System.Windows.Forms;
using System.Xml;

namespace Optoset
{
    public partial class NastaveniaForm : Form
    {

        private const string fileName = "nastavenia.xml";

        public NastaveniaForm()
        {
            InitializeComponent();
        }

        public void Initiate()
        {
            if (File.Exists(Directory.GetCurrentDirectory() + "\\data\\" + fileName))
            {
                LoadData();
            }
        }

        private void NastaveniaForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!Validate())
            {
                e.Cancel = true;
                return;
            }
            Save();
            Hide();
            e.Cancel = true;
        }

        private void Save()
        {
            if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\data"))
            {
                Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\data");
            }

            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(Directory.GetCurrentDirectory() + "\\data\\" + fileName, settings);

            writer.WriteStartDocument();

            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("nastavenia");

            writer.WriteElementString("nazov", textBox1.Text);
            writer.WriteElementString("ico", textBox2.Text);
            writer.WriteElementString("dic", textBox3.Text);
            writer.WriteElementString("icdph", textBox4.Text);
            writer.WriteElementString("adresa", richTextBox1.Text);
            writer.WriteElementString("iban", textBox7.Text);
            writer.WriteElementString("bic", textBox8.Text);
            writer.WriteElementString("register", textBox5.Text);
            writer.WriteElementString("ustav", textBox6.Text);
            writer.WriteElementString("kodPoskytovatela", textBox9.Text);
            writer.WriteElementString("registracnyKod", textBox10.Text);
            writer.WriteElementString("poplatokZaRecept", textBox11.Text);

            writer.WriteEndElement();

            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void LoadData()
        {
            var file = new XmlDocument();
            file.Load(Directory.GetCurrentDirectory() + "\\data\\" + fileName);

            var n = file.GetElementsByTagName("nastavenia");
            if (n.Count > 0)
            {
                XmlNode nastavenia = n[0];
                textBox1.Text = nastavenia.SelectNodes("nazov")[0].InnerText;
                textBox2.Text = nastavenia.SelectNodes("ico")[0].InnerText;
                textBox3.Text = nastavenia.SelectNodes("dic")[0].InnerText;
                textBox4.Text = nastavenia.SelectNodes("icdph")[0].InnerText;
                richTextBox1.Text = nastavenia.SelectNodes("adresa")[0].InnerText;
                textBox7.Text = nastavenia.SelectNodes("iban")[0].InnerText;
                textBox8.Text = nastavenia.SelectNodes("bic")[0].InnerText;
                textBox5.Text = nastavenia.SelectNodes("register")[0].InnerText;
                textBox6.Text = nastavenia.SelectNodes("ustav")[0].InnerText;
                textBox9.Text = nastavenia.SelectNodes("kodPoskytovatela")[0].InnerText;
                textBox10.Text = nastavenia.SelectNodes("registracnyKod")[0].InnerText;
                textBox11.Text = nastavenia.SelectNodes("poplatokZaRecept")[0].InnerText;
            }
        }

        public bool Validate()
        {
            if (!ValidateNazov())
            {
                MessageBox.Show("Názov výdajne nesmie byť prázdny");
                return false;
            }

            if (!ValidateIco())
            {
                MessageBox.Show("IČO musí pozostávať z čísel a musí byť dĺžky 8");
                return false;
            }

            if (!ValidateDic())
            {
                MessageBox.Show("DIČ musí pozostávať z čísel a musí byť dĺžky 10");
                return false;
            }

            if (!ValidateIcdph())
            {
                MessageBox.Show("Nesprávny formát IČ-DPH (má byť SK0000000000, pričom posledných 10 znakov musí byť zhodných s DIČ)");
                return false;
            }

            if (!ValidateAdresa())
            {
                MessageBox.Show("Adresa výdajne nesmie byť prázdna");
                return false;
            }

            if (!ValidateIban())
            {
                MessageBox.Show("Nesprávny formát IBAN (má byť 2 znaky a maximálne 32 čísel)");
                return false;
            }

            if (!ValidateBic())
            {
                MessageBox.Show("Nesprávny formát BIČ");
                return false;
            }

            return true;
        }

        private bool ValidateNazov()
        {
            return !textBox1.Text.Equals("");
        }

        private bool ValidateIco()
        {
            int i;
            return (!textBox2.Text.Equals("") && textBox2.Text.Length == 8 && int.TryParse(textBox2.Text, out i));
        }

        private bool ValidateDic()
        {
            int i;
            return (!textBox3.Text.Equals("") && textBox3.Text.Length == 10 && int.TryParse(textBox3.Text, out i));
        }

        public bool ValidateIcdph()
        {
            int i;
            return (textBox4.Text.Equals("") || (textBox4.Text.Length == 12 && textBox4.Text.Substring(0, 2).Equals("SK") &&
                    int.TryParse(textBox4.Text.Substring(2), out i) && textBox4.Text.Substring(2).Equals(textBox3.Text)));
        }

        public bool ValidateAdresa()
        {
            return true;
        }

        public bool ValidateIban()
        {
            return true;
        }

        public bool ValidateBic()
        {
            return true;
        }
    }
}
