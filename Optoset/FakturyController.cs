using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;

namespace Optoset
{
    public class FakturyController
    {

        public List<Faktura> _faktury;
        public HashSet<string> Kluce;

        public const string fakturyDirectoryName = "mesiace";

        public FakturyController()
        {
            Faktury = new List<Faktura>();
            Kluce = new HashSet<string>();
        }

        public List<Faktura> Faktury
        {
            get { return _faktury; }
            set { _faktury = value; }
        }

        public bool PridajFakturu(string cislo, string poistovna, string obdobie, string cennik)
        {
            Faktura f = new Faktura(cislo, poistovna, obdobie, cennik);
            if (f.Validates())
            {
                if (!Kluce.Contains(cislo))
                {
                    Faktury.Add(f);
                    Kluce.Add(cislo);
                    return true;
                }
                MessageBox.Show("Faktúra s daným číslom už existuje.");
                return false;
            }
            MessageBox.Show("Prosím vyplňte všetky údaje.");
            return false;
        }

        public bool UpravFakturu(int index, string cislo, string poistovna, string obdobie, string cennik, bool prepocitaj)
        {
            Faktura f = new Faktura(cislo, poistovna, obdobie, cennik);
            if (f.Validates())
            {
                if (!Kluce.Contains(cislo) || Faktury[index].Cislo == cislo)
                {
                    Kluce.Remove(Faktury[index].Cislo);
                    Faktury[index].Cislo = cislo;
                    Faktury[index].Poistovna = poistovna;
                    Faktury[index].Obdobie = obdobie;
                    Faktury[index].Cennik = cennik;
                    Kluce.Add(cislo);

                    if (prepocitaj) 
                    {
                        Faktury[index].PrepocitajFakturu();
                    }
                    return true;
                }
                MessageBox.Show("Faktúra s daným číslom už existuje.");
                return false;
            }
            MessageBox.Show("Prosím vyplňte všetky údaje.");
            return false;
        }

        public void UlozFakturu(int index)
        {
            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\data\\" + fakturyDirectoryName + "\\" +
                                      Faktury[index].Obdobie);

            Faktura f = Faktury[index];
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(Directory.GetCurrentDirectory() + "\\data\\" + fakturyDirectoryName + "\\" +
                                      f.Obdobie + "\\" + f.Poistovna + "_" + f.Cislo + ".xml", settings);

            writer.WriteStartDocument();

            writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("faktura");

            writer.WriteAttributeString("cislo", f.Cislo);
            writer.WriteAttributeString("poistovna", f.Poistovna);
            writer.WriteAttributeString("obdobie", f.Obdobie);
            writer.WriteAttributeString("cennik", f.Cennik);

            foreach (var poukaz in f.Poukazy)
            {
                writer.WriteStartElement("poukaz");
                writer.WriteAttributeString("pobocka", poukaz.Pobocka.Cislo);
                writer.WriteAttributeString("rodneCislo", poukaz.RodneCislo);
                writer.WriteAttributeString("lekarKod", poukaz.Lekar.Kod);
                writer.WriteAttributeString("lekarKpzs", poukaz.Lekar.Kpzs);
                writer.WriteAttributeString("diagnoza", poukaz.Diagnoza);
                writer.WriteAttributeString("datumPredpisania", poukaz.DatumPredpisania);
                writer.WriteAttributeString("datumVydaja", poukaz.DatumVydaja);

                foreach (var pomocka in poukaz.Pomocky)
                {
                    writer.WriteStartElement("pomocka");
                    writer.WriteAttributeString("kod", pomocka.Pomocka.Kod);
                    writer.WriteAttributeString("mnozstvo", pomocka.Mnozstvo.ToString());
                    writer.WriteAttributeString("hradiPoistovna", pomocka.HradiPoistovna.ToString());
                    writer.WriteAttributeString("hradiPacient", pomocka.HradiPacient.ToString());
                    writer.WriteEndElement();
                }

                writer.WriteEndElement();
            }

            writer.WriteEndElement();

            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();

            MessageBox.Show("Faktúra bola úspešne uložená.");
        }

        public bool NacitajFakturu(string fileName, PobockyController pc, LekariController lc)
        {
            var file = new XmlDocument();
            file.Load(fileName);

            var fakturaNodes = file.GetElementsByTagName("faktura");
            var error = false;
            if (fakturaNodes.Count > 0)
            {
                var faktura = fakturaNodes[0];
                Faktura f = new Faktura();

                if (faktura.Attributes != null)
                {
                    f.Cislo = faktura.Attributes["cislo"].InnerText;
                    f.Poistovna = faktura.Attributes["poistovna"].InnerText;
                    f.Obdobie = faktura.Attributes["obdobie"].InnerText;
                    f.Cennik = faktura.Attributes["cennik"].InnerText;
                }

                PomockyController pomc = new PomockyController();
                if (!pomc.NacitajCennik(f.Cennik))
                {
                    return false;
                }

                var poukazyNodes = faktura.SelectNodes("poukaz");
                foreach (XmlNode poukaz in poukazyNodes)
                {
                    Poukaz p = new Poukaz();
                    p.Pobocka = pc.Pobocky.Find(x => x.Cislo.Equals(poukaz.Attributes["pobocka"].InnerText));
                    p.RodneCislo = poukaz.Attributes["rodneCislo"].InnerText;
                    p.Lekar =
                        lc.Lekari.Find(
                            x =>
                                x.Kod.Equals(poukaz.Attributes["lekarKod"].InnerText) &&
                                x.Kpzs.Equals(poukaz.Attributes["lekarKpzs"].InnerText));
                    p.Diagnoza = poukaz.Attributes["diagnoza"].InnerText;
                    p.DatumPredpisania = poukaz.Attributes["datumPredpisania"].InnerText;
                    p.DatumVydaja = poukaz.Attributes["datumVydaja"].InnerText;

                    var pomockyNodes = poukaz.SelectNodes("pomocka");
                    foreach (XmlNode pomocka in pomockyNodes)
                    {
                        PoukazPomocka pom = new PoukazPomocka();
                        pom.Pomocka = pomc.Pomocky.Find(x => x.Kod.Equals(pomocka.Attributes["kod"].InnerText));
                        pom.Mnozstvo = int.Parse(pomocka.Attributes["mnozstvo"].InnerText);
                        pom.HradiPoistovna = double.Parse(pomocka.Attributes["hradiPoistovna"].InnerText.Replace(',', '.'), CultureInfo.InvariantCulture);
                        pom.HradiPacient = double.Parse(pomocka.Attributes["hradiPacient"].InnerText.Replace(',', '.'), CultureInfo.InvariantCulture);

                        p.Pomocky.Add(pom);
                    }
                    f.Poukazy.Add(p);
                }
                Faktury.Add(f);
            }
            else
            {
                error = true;
            }

            if (error)
            {
                MessageBox.Show("Súbor je v nesprávnom formáte");
                return false;
            }
            return true;
        }
    }
}
